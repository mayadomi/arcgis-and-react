import{a1 as _,ad as v,I as S,U as c,cX as T,s as u,c9 as b,f as s,y as a,O as w,N as O,cY as $,g as R}from"./index-BdlI2FVT.js";import{t as U}from"./loadAll-d4sPuW9e.js";import{m as W}from"./MultiOriginJSONSupport-BP0y40tB.js";import{b as P}from"./Layer-CcYrbAYa.js";import{i as j}from"./APIKeyMixin-Cr6SPtKV.js";import{p as I}from"./ArcGISCachedService-BvoLq9Pf.js";import{m as L,f as N,Y as A}from"./SublayersOwner-CXpYMM80.js";import{l as B}from"./ArcGISService-B0MFY8rl.js";import{n as M}from"./BlendLayer-CCBI54kf.js";import{e as C}from"./CustomParametersMixin-B15dM9ne.js";import{u as k}from"./OperationalLayer-BvVMmVx0.js";import{j as D}from"./PortalLayer-Ce7CgRR0.js";import{f as J}from"./RefreshableLayer-DgZkcGPN.js";import{t as q}from"./ScaleRangeLayer-B24df4gL.js";import{p as G,w as V,v as E}from"./portalItemUtils-CCKlXC6h.js";import{d as x}from"./commonProperties-DDhb4E0s.js";import{o as y}from"./imageBitmapUtils-SPKoFlzm.js";import"./TileInfo-dXrVrRwv.js";import"./TileInfoTilemapCache-PZOmj2ep.js";import"./TilemapCache-DYg_BarK.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./LRUCache-CZ2xYNgP.js";import"./Version-Cllr3DhQ.js";import"./CollectionFlattener-CM1KduCr.js";import"./UniqueValueRenderer-7uqoe5qH.js";import"./ColorStop-BjodVbhP.js";import"./diffUtils-Cvmld_nE.js";import"./colorRamps-CSdC0saB.js";import"./compilerUtils-vO2blZnn.js";import"./styleUtils-DHuQZmH8.js";import"./layerUtils-C0ByrsCg.js";import"./jsonUtils-BIPVkO8e.js";import"./FieldsIndex-BZm6eFTZ.js";import"./UnknownTimeZone-BLIgHyqR.js";import"./colorUtils-K6WWckc_.js";import"./vec42-DpHkGCNS.js";import"./vec4f64-CCf6w8sj.js";import"./heatmapUtils-Xd5ASPFI.js";import"./QueryTask-C_Fy3dex.js";import"./infoFor3D-DsOdlPuA.js";import"./Query-C67dhdyp.js";import"./Field-CcwrtZjp.js";import"./fieldType-CHp3lv4g.js";import"./utils-nisnNviQ.js";import"./executeForIds-DOReORur.js";import"./query-gDdM8KJG.js";import"./normalizeUtils-Cik6ve5l.js";import"./normalizeUtilsCommon-Cpq7p5az.js";import"./pbfQueryUtils-2_EOj78-.js";import"./pbf-vQQtfZjw.js";import"./OptimizedGeometry-CQuTPb9g.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-DxngEzoS.js";import"./projection-NmY8Pkrx.js";import"./executeQueryJSON-DQvHyqrp.js";import"./FeatureSet-BVXviJDD.js";import"./executeQueryPBF-u_spJMXj.js";import"./featureConversionUtils-DuXJe-nV.js";import"./FeatureType-CW1OCJu1.js";import"./FeatureTemplate-BXMIhaq_.js";import"./LabelClass-1tjVzjjL.js";import"./defaults-xH7YtUqE.js";import"./defaultsJSON-CHAaurhX.js";import"./labelingInfo-Dio46WYR.js";import"./LayerFloorInfo-CAYEpzeH.js";import"./serviceCapabilitiesUtils-CcOSoojL.js";import"./AttachmentQuery-CmVGfcPE.js";import"./popupUtils-fsRna_vH.js";import"./sublayerUtils-DeEdtjiO.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-CSxAPr-6.js";import"./PortalItem-D_imZ4F9.js";var d;const f=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends M(q(L(I(N(k(D(B(W(J(j(C(P)))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(_).then(()=>this._fetchService(r))),Promise.resolve(this)}get attributionDataUrl(){var r;const e=(r=this.parsedUrl)==null?void 0:r.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){var t;return(e=e||((t=r.tileInfo)==null?void 0:t.spatialReference))&&v.fromJSON(e)}writeSublayers(e,r,t,o){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:l})=>l&&l.toArray().reverse()).toArray(),n=[],m={writeSublayerStructure:!1,...o};p.forEach(l=>{const h=l.write({},m);n.push(h)}),n.some(l=>Object.keys(l).length>1)&&(r.layers=n)}get tileServers(){var e;return this._getDefaultTileServers((e=this.parsedUrl)==null?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map(r=>S(r).path):null}fetchTile(e,r,t,o={}){const{signal:p}=o,n=this.getTileUrl(e,r,t),m={responseType:"image",signal:p,query:{...this.refreshParameters}};return c(n,m).then(l=>l.data)}async fetchImageBitmapTile(e,r,t,o={}){const{signal:p}=o;if(this.fetchTile!==d.prototype.fetchTile){const h=await this.fetchTile(e,r,t,o);return y(h,e,r,t,p)}const n=this.getTileUrl(e,r,t),m={responseType:"blob",signal:p,query:{...this.refreshParameters}},{data:l}=await c(n,m);return y(l,e,r,t,p)}getTileUrl(e,r,t){var m,l;const o=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,p=T({...(m=this.parsedUrl)==null?void 0:m.query,blankTile:!o&&null,...this.customParameters,token:this.apiKey}),n=this.tileServers;return`${n&&n.length?n[r%n.length]:(l=this.parsedUrl)==null?void 0:l.path}/tile/${e}/${r}/${t}${p?"?"+p:""}`}loadAll(){return U(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new u("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new u("tile-layer:undefined-url","layer's url is not defined");const o=G(this.parsedUrl.path);if(o!=null&&o.serverType==="ImageServer")throw new u("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");c(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)}).then(r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!V(t))return this._fetchServerVersion(t,e).then(o=>{this.read({currentVersion:o})}).catch(()=>{})})}_fetchServerVersion(e,r){if(!E(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return c(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then(o=>{if(o.data&&o.data.currentVersion)return o.data.currentVersion;throw new u("tile-layer:version-not-available")})}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,o=f.length;t<o;t++)if(r=f[t],r.toLowerCase().includes(e))return b("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};s([a({readOnly:!0})],i.prototype,"attributionDataUrl",null),s([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([a({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0),s([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([a({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([a({type:Boolean})],i.prototype,"resampling",void 0),s([a()],i.prototype,"sourceJSON",void 0),s([a({type:v})],i.prototype,"spatialReference",void 0),s([w("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null),s([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),s([a({readOnly:!0})],i.prototype,"sublayers",void 0),s([O("sublayers",{layers:{type:[A]}})],i.prototype,"writeSublayers",null),s([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([a()],i.prototype,"tileServers",null),s([$("tileServers")],i.prototype,"castTileServers",null),s([a({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0),s([a(x)],i.prototype,"url",void 0),i=d=s([R("esri.layers.TileLayer")],i);const g=Symbol("default-fetch-tile");i.prototype.fetchTile[g]=!0;const mr=i;export{mr as default};
