import{b3 as T,U as G,V as z,h as O,d7 as F,m as S,b6 as U,ad as $,d8 as N,d9 as A,cX as W,f as v,y as C,g as H}from"./index-BdlI2FVT.js";import{U as k,B as K}from"./projection-NmY8Pkrx.js";import{b as D,g as J,d as X}from"./kmlUtils-CE5L6mIF.js";import{f as Y}from"./utils-nisnNviQ.js";import{c as P}from"./GraphicsCollection-BMGOUijs.js";import{g as Q,f as Z,b as tt}from"./Bitmap-qrK-aTxu.js";import{a as it}from"./BitmapContainer-BgVujTp1.js";import{m as et,u as rt}from"./LayerView-D4u4EJ0S.js";import{t as M}from"./GraphicContainer-qa1Rca9j.js";import{$ as R}from"./GraphicsView2D-CFJVPBkr.js";import{C as at,e as ot}from"./rasterProjectionHelper-CsVr1An-.js";import{a as st}from"./WGLContainer-C7UTPXjP.js";import{w as nt,o as pt}from"./RenderingContext-BDJx-WuI.js";import{t as lt}from"./capabilities-C84AMSCg.js";import{D as E,G as mt,U as ht,X as L}from"./enums-CYMvjYBC.js";import{x as ct}from"./Program-BT4psGrM.js";import{c as dt}from"./rasterUtils-zVYOegL7.js";import{e as q,m as ut}from"./Texture-p7xZY2dS.js";import"./jsonUtils-BIPVkO8e.js";import"./UniqueValueRenderer-7uqoe5qH.js";import"./ColorStop-BjodVbhP.js";import"./diffUtils-Cvmld_nE.js";import"./colorRamps-CSdC0saB.js";import"./compilerUtils-vO2blZnn.js";import"./commonProperties-DDhb4E0s.js";import"./styleUtils-DHuQZmH8.js";import"./layerUtils-C0ByrsCg.js";import"./LRUCache-CZ2xYNgP.js";import"./Version-Cllr3DhQ.js";import"./FieldsIndex-BZm6eFTZ.js";import"./UnknownTimeZone-BLIgHyqR.js";import"./colorUtils-K6WWckc_.js";import"./vec42-DpHkGCNS.js";import"./vec4f64-CCf6w8sj.js";import"./heatmapUtils-Xd5ASPFI.js";import"./FeatureSet-BVXviJDD.js";import"./Field-CcwrtZjp.js";import"./fieldType-CHp3lv4g.js";import"./mat3-e0AQhzgy.js";import"./map-CoC24dow.js";import"./Basemap-CgzecouK.js";import"./loadAll-d4sPuW9e.js";import"./PortalItem-D_imZ4F9.js";import"./writeUtils-BJozxT0a.js";import"./CollectionFlattener-CM1KduCr.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-CSxAPr-6.js";import"./TablesMixin-osra4OQn.js";import"./Layer-CcYrbAYa.js";import"./Cyclical-DUB0vV49.js";import"./workers-BoWLbb4j.js";import"./TileInfo-dXrVrRwv.js";import"./themeUtils-B9K1g8Wn.js";import"./uuid-fwrPAdZb.js";import"./UpdatingHandles-DjmbdLdJ.js";import"./signal-yOcmJBqC.js";import"./HeightModelInfo-B2Y4TPgv.js";import"./QueueProcessor-tmTJ5qZx.js";import"./Query-C67dhdyp.js";import"./portalItemUtils-CCKlXC6h.js";import"./ViewingMode-HRfKv6NR.js";import"./unitBezier-BX6NeAEr.js";import"./HighlightOptions-UfuqKf1Y.js";import"./TileKey-D5-VD3yk.js";import"./vec2-DEIrm0UN.js";import"./quickselect-D0_cvEX6.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./vec2f64-CaE_5U6X.js";import"./normalizeUtils-Cik6ve5l.js";import"./normalizeUtilsCommon-Cpq7p5az.js";import"./vec2f32-BbH2jxlN.js";import"./FeatureLayer-jETWI0X3.js";import"./MultiOriginJSONSupport-BP0y40tB.js";import"./FormTemplate-Fi3tdScn.js";import"./editsZScale-Csrkyd4Q.js";import"./queryZScale-DxngEzoS.js";import"./APIKeyMixin-Cr6SPtKV.js";import"./ArcGISService-B0MFY8rl.js";import"./BlendLayer-CCBI54kf.js";import"./CustomParametersMixin-B15dM9ne.js";import"./EditBusLayer-BMIf9G9a.js";import"./FeatureEffectLayer-BThrs5AW.js";import"./FeatureLayerBase-DLhTJN_m.js";import"./featureLayerUtils-ecDuVTtZ.js";import"./AttachmentQuery-CmVGfcPE.js";import"./RelationshipQuery-BllPoPyE.js";import"./LayerFloorInfo-CAYEpzeH.js";import"./serviceCapabilitiesUtils-CcOSoojL.js";import"./FeatureReductionLayer-hLfjwizl.js";import"./FeatureReductionSelection-B0n0R-D3.js";import"./LabelClass-1tjVzjjL.js";import"./defaults-xH7YtUqE.js";import"./defaultsJSON-CHAaurhX.js";import"./MD5-C9MwAd2G.js";import"./OperationalLayer-BvVMmVx0.js";import"./OrderedLayer-DupPBghv.js";import"./PortalLayer-Ce7CgRR0.js";import"./RefreshableLayer-DgZkcGPN.js";import"./ScaleRangeLayer-B24df4gL.js";import"./TemporalLayer-BLPwEJby.js";import"./TimeInfo-BBnCNS7R.js";import"./FeatureTemplate-BXMIhaq_.js";import"./FeatureType-CW1OCJu1.js";import"./fieldProperties-BRDCz7QD.js";import"./labelingInfo-Dio46WYR.js";import"./versionUtils-DcsImNVm.js";import"./styleUtils-CiyELj_N.js";import"./TopFeaturesQuery-o_i6H2-K.js";import"./popupUtils-fsRna_vH.js";import"./interfaces-CL2NbQte.js";import"./Container-2mGzxoHB.js";import"./highlightReasons-DJwsG8nn.js";import"./definitions-C14Q9bsB.js";import"./scaleUtils-DaNVMeZM.js";import"./AGraphicContainer-B3iV7Dd7.js";import"./TechniqueInstance-gBQYCH7a.js";import"./UpdateTracking2D-BkBbPD5Z.js";import"./TurboLine-KBIZT6YU.js";import"./enums-BRqP_wXA.js";import"./earcut-BqgeR2O3.js";import"./GeometryUtils-Btbfqoh8.js";import"./OptimizedGeometry-CQuTPb9g.js";import"./Rect-CUzevAry.js";import"./LabelMetric-CfMDGQiE.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BindType-BmZEZMMh.js";import"./Util-BSm5ikH9.js";import"./constants-D5zmR9t2.js";import"./TileContainer-SsCW_SqX.js";import"./FeatureCommandQueue-BrQDIuK0.js";import"./ProgramTemplate-DU_rpBUQ.js";import"./vec3f32-nZdmKIgz.js";import"./AttributeStore-DzdMuWfB.js";import"./TimeOnly-BmkK1Ctx.js";import"./timeSupport-BoBnP7hk.js";import"./featureConversionUtils-DuXJe-nV.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./json-Wa8cmqdu.js";import"./normalizeUtilsSync-C7NXEv7S.js";import"./StyleDefinition-pu9RBNlY.js";import"./config-MDUrh2eL.js";import"./webglDeps-Bedzc73g.js";import"./NestedMap-DgiGbX8E.js";import"./OrderIndependentTransparency-D0wfjx-a.js";import"./basicInterfaces-GbxEOYtk.js";import"./testSVGPremultipliedAlpha-9qvTjWSl.js";import"./floatRGBA-CAblgi7u.js";import"./doublePrecisionUtils-B0owpBza.js";class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas"),r=lt(e);r.getExtension("OES_texture_float"),this._rctx=new nt(r,{})}const a={applyProjection:!0,bilinear:!1,bicubic:!1},o=pt("raster/reproject","raster/reproject",new Map([["a_position",0]]),a);this._program=this._rctx.programCache.acquire(o.shaders.vertexShader,o.shaders.fragmentShader,o.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new st(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,a,o=!1){const e=k(t.extent,a),r=new T({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:s,y:l}=at(r,a,t.extent);let n=(s+l)/2;const p=Math.round((e.xmax-e.xmin)/n),u=Math.round((e.ymax-e.ymin)/n);n=(e.width/p+e.height/u)/2;const I=new T({x:n,y:n,spatialReference:e.spatialReference}),_=ot({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:I,hasWrapAround:!0,spacing:[16,16]}),w=dt(this._rctx,_),f=new q(p,u);f.wrapMode=E.CLAMP_TO_EDGE;const h=new ct(this._rctx,f);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,p,u),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(w,1),this._quad.bind();const{width:y=0,height:x=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",y,x),this._program.setUniform2fv("u_transformSpacing",_.spacing),this._program.setUniform2fv("u_transformGridSize",_.size),this._program.setUniform2f("u_targetImageSize",p,u),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),w.dispose(),o){const{width:c,height:V}=h,g=new ImageData(c??0,V??0);h.readPixels(0,0,c??0,V??0,mt.RGBA,ht.UNSIGNED_BYTE,g.data);const B=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:B,extent:e,imageData:g}}const b=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:b,extent:e}}reprojectBitmapData(t,a){const o=Q(t.bitmapData)?Z(t.bitmapData):t.bitmapData,e=new q;e.wrapMode=E.CLAMP_TO_EDGE,e.width=t.bitmapData.width,e.height=t.bitmapData.height;const r=new ut(this._rctx,e,o),s=this.reprojectTexture({texture:r,extent:t.extent},a,!0);s.texture.dispose();const l=document.createElement("canvas"),n=s.imageData;return l.width=n.width,l.height=n.height,l.getContext("2d").putImageData(n,0,0),{bitmapData:l,extent:s.extent}}async loadAndReprojectBitmapData(t,a,o){const e=(await G(t,{responseType:"image"})).data,r=document.createElement("canvas");r.width=e.width,r.height=e.height;const s=r.getContext("2d");s.drawImage(e,0,0);const l=s.getImageData(0,0,r.width,r.height);if(a.spatialReference.equals(o))return{bitmapData:l,extent:a};const n=this.reprojectBitmapData({bitmapData:l,extent:a},o);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class j{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends et(rt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new it,this._kmlVisualData=new j,this._fetchController=null,this.allVisiblePoints=new P,this.allVisiblePolylines=new P,this.allVisiblePolygons=new P,this.allVisibleMapImages=new z}async hitTest(i,t){var o,e,r;const a=this.layer;return[(o=this._pointsView)==null?void 0:o.hitTest(i),(e=this._polylinesView)==null?void 0:e.hitTest(i),(r=this._polygonsView)==null?void 0:r.hitTest(i)].flat().filter(Boolean).map(s=>(s.layer=a,s.sourceLayer=a,{type:"graphic",graphic:s,layer:a,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),O(()=>this.layer.visibleSublayers,i=>{for(const[t,a]of this._kmlVisualData.allSublayers)a.visibility=0;for(const t of i){const a=this._kmlVisualData.allSublayers.get(t.id);a&&(a.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=F(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=S(this._polygonsView),this._polylinesView=S(this._polylinesView),this._pointsView=S(this._pointsView),this._imageReprojector=S(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){var t,a;((t=this.view.spatialReference)!=null&&t.isWGS84||(a=this.view.spatialReference)!=null&&a.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,U.fromJSON(i.extent),this.view.spatialReference).then(o=>{const e=new tt(o.bitmapData);e.x=o.extent.xmin,e.y=o.extent.ymax,e.resolution=o.extent.width/o.bitmapData.width,e.rotation=i.rotation,this._mapImageContainer.addChild(e),this._bitmapIndex.set(i,e)})}async _getViewDependentUrl(i,t){const{viewFormat:a,viewBoundScale:o,httpQuery:e}=i;if(a!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let r;if(await K(),o!=null&&o!==1){const c=new U(t.extent);c.expand(o),r=c}else r=t.extent;r=k(r,$.WGS84);const s=k(r,$.WebMercator),l=r.xmin,n=r.xmax,p=r.ymin,u=r.ymax,I=t.size[0]*t.pixelRatio,_=t.size[1]*t.pixelRatio,w=Math.max(s.width,s.height),f={"[bboxWest]":l.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":p.toString(),"[bboxNorth]":u.toString(),"[lookatLon]":r.center.x.toString(),"[lookatLat]":r.center.y.toString(),"[lookatRange]":w.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":r.center.x.toString(),"[lookatTerrainLat]":r.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":r.center.x.toString(),"[cameraLat]":r.center.y.toString(),"[cameraAlt]":w.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":I.toString(),"[vertPixels]":_.toString(),"[terrainEnabled]":"0","[clientVersion]":N,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=c=>{for(const V in c){let g;for(g in f)c[V]=c[V].replace(g,f[g])}},y=A(a);h(y);let x={};e!=null&&(x=A(e),h(x));const b=Y(i.href);return b.query={...b.query,...y,...x},`${b.path}?${W(y)}`}return i.href}async _fetchService(i){const t=new j;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,a){return this._fetchParsedKML(i,a).then(async o=>{for(const e of o.sublayers){t.allSublayers.set(e.id,e);const r=e.points?await D(e.points):[],s=e.polylines?await D(e.polylines):[],l=e.polygons?await D(e.polygons):[],n=e.mapImages||[];if(t.allPoints.push(...r.map(p=>({item:p,sublayerId:e.id}))),t.allPolylines.push(...s.map(p=>({item:p,sublayerId:e.id}))),t.allPolygons.push(...l.map(p=>({item:p,sublayerId:e.id}))),t.allMapImages.push(...n.map(p=>({item:p,sublayerId:e.id}))),e.networkLink){const p=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(p,t,a)}}})}_fetchParsedKML(i,t){return J(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(a=>X(a.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};v([C()],d.prototype,"_pointsView",void 0),v([C()],d.prototype,"_polylinesView",void 0),v([C()],d.prototype,"_polygonsView",void 0),v([C()],d.prototype,"updating",void 0),d=v([H("esri.views.2d.layers.KMLLayerView2D")],d);const ir=d;export{ir as default};
