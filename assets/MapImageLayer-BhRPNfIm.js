import{a1 as I,cH as v,bi as g,cO as $,U as b,b6 as T,s as x,d as O,f as o,y as p,cP as S,O as E,N as M,g as P,cQ as R}from"./index-BdlI2FVT.js";import{c as F,d as L}from"./commonProperties-DDhb4E0s.js";import{t as U}from"./loadAll-d4sPuW9e.js";import{m as j}from"./MultiOriginJSONSupport-BP0y40tB.js";import{i as N}from"./scaleUtils-DaNVMeZM.js";import{b as J}from"./Layer-CcYrbAYa.js";import{i as q}from"./APIKeyMixin-Cr6SPtKV.js";import{m as A,f as _,Y as k}from"./SublayersOwner-CXpYMM80.js";import{l as V}from"./ArcGISService-B0MFY8rl.js";import{n as z}from"./BlendLayer-CCBI54kf.js";import{e as H}from"./CustomParametersMixin-B15dM9ne.js";import{u as Z}from"./OperationalLayer-BvVMmVx0.js";import{j as B}from"./PortalLayer-Ce7CgRR0.js";import{f as C}from"./RefreshableLayer-DgZkcGPN.js";import{t as D}from"./ScaleRangeLayer-B24df4gL.js";import{f as G}from"./TemporalLayer-BLPwEJby.js";import{m as K}from"./ExportImageParameters-Bnx3mNZh.js";import{t as W}from"./imageBitmapUtils-SPKoFlzm.js";import{e as w}from"./sublayerUtils-DeEdtjiO.js";import{e as Q}from"./versionUtils-DcsImNVm.js";import"./Version-Cllr3DhQ.js";import"./portalItemUtils-CCKlXC6h.js";import"./projection-NmY8Pkrx.js";import"./CollectionFlattener-CM1KduCr.js";import"./UniqueValueRenderer-7uqoe5qH.js";import"./ColorStop-BjodVbhP.js";import"./diffUtils-Cvmld_nE.js";import"./colorRamps-CSdC0saB.js";import"./compilerUtils-vO2blZnn.js";import"./styleUtils-DHuQZmH8.js";import"./layerUtils-C0ByrsCg.js";import"./jsonUtils-BIPVkO8e.js";import"./LRUCache-CZ2xYNgP.js";import"./FieldsIndex-BZm6eFTZ.js";import"./UnknownTimeZone-BLIgHyqR.js";import"./colorUtils-K6WWckc_.js";import"./vec42-DpHkGCNS.js";import"./vec4f64-CCf6w8sj.js";import"./heatmapUtils-Xd5ASPFI.js";import"./QueryTask-C_Fy3dex.js";import"./infoFor3D-DsOdlPuA.js";import"./Query-C67dhdyp.js";import"./Field-CcwrtZjp.js";import"./fieldType-CHp3lv4g.js";import"./utils-nisnNviQ.js";import"./executeForIds-DOReORur.js";import"./query-gDdM8KJG.js";import"./normalizeUtils-Cik6ve5l.js";import"./normalizeUtilsCommon-Cpq7p5az.js";import"./pbfQueryUtils-2_EOj78-.js";import"./pbf-vQQtfZjw.js";import"./OptimizedGeometry-CQuTPb9g.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-DxngEzoS.js";import"./executeQueryJSON-DQvHyqrp.js";import"./FeatureSet-BVXviJDD.js";import"./executeQueryPBF-u_spJMXj.js";import"./featureConversionUtils-DuXJe-nV.js";import"./FeatureType-CW1OCJu1.js";import"./FeatureTemplate-BXMIhaq_.js";import"./LabelClass-1tjVzjjL.js";import"./defaults-xH7YtUqE.js";import"./defaultsJSON-CHAaurhX.js";import"./labelingInfo-Dio46WYR.js";import"./LayerFloorInfo-CAYEpzeH.js";import"./serviceCapabilitiesUtils-CcOSoojL.js";import"./AttachmentQuery-CmVGfcPE.js";import"./popupUtils-fsRna_vH.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-CSxAPr-6.js";import"./PortalItem-D_imZ4F9.js";import"./TimeInfo-BBnCNS7R.js";import"./floorFilterUtils-DZ5C6FQv.js";let r=class extends z(G(D(A(_(V(Z(B(j(C(q(H(J)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(I).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const n=i.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,n,t){var h,c,y;if(!this.loaded||!e)return;const s=e.slice().reverse().flatten(({sublayers:a})=>a&&a.toArray().reverse()).toArray();let m=!1;if((h=this.capabilities)!=null&&h.operations.supportsExportMap&&((y=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&y.supportsDynamicLayers)){const a=v(t.origin);if(a===g.PORTAL_ITEM){const f=this.createSublayersForOrigin("service").sublayers;m=w(s,f,g.SERVICE)}else if(a>g.PORTAL_ITEM){const f=this.createSublayersForOrigin("portal-item");m=w(s,f.sublayers,v(f.origin))}}const l=[],u={writeSublayerStructure:m,...t};let d=m;s.forEach(a=>{const f=a.write({},u);l.push(f),d=d||a.originOf("visible")==="user"}),l.some(a=>Object.keys(a).length>1)&&(i.layers=l),d&&(i.visibleLayers=s.filter(a=>a.visible).map(a=>a.id))}createExportImageParameters(e,i,n,t){const s=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const m=new K({layer:this,floors:t==null?void 0:t.floors,scale:N({extent:e,width:i})*s}),l=m.toJSON();m.destroy();const u=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},d=e==null?void 0:e.spatialReference,h=$(d);l.dpi*=s;const c={};if(t!=null&&t.timeExtent){const{start:y,end:a}=t.timeExtent.toJSON();c.time=y&&a&&y===a?""+y:`${y??"null"},${a??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:i+","+n,...l,...u,...c}}async fetchImage(e,i,n,t){const{data:s}=await this._fetchImage("image",e,i,n,t);return s}async fetchImageBitmap(e,i,n,t){const{data:s,url:m}=await this._fetchImage("blob",e,i,n,t);return W(s,m,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await b(this.url,i),{extent:t,fullExtent:s,timeExtent:m}=n,l=t||s;return{fullExtent:l&&T.fromJSON(l),timeExtent:m&&F.fromJSON({start:m[0],end:m[1]})}}loadAll(){return U(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Q(this,e)}async _fetchImage(e,i,n,t,s){var u,d,h;const m={responseType:e,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,n,t,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((u=m.query)==null?void 0:u.dynamicLayers)!=null&&!((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:c}=await b(l,m);return{data:c,url:l}}catch(c){throw O(c)?c:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:c})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:n}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};o([p(S("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),o([p({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),o([p()],r.prototype,"dpi",void 0),o([p()],r.prototype,"gdbVersion",void 0),o([p()],r.prototype,"imageFormat",void 0),o([E("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),o([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),o([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),o([p()],r.prototype,"imageTransparency",void 0),o([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),o([p({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),o([p({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),o([p({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),o([p(S("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),o([p()],r.prototype,"sourceJSON",void 0),o([p({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),o([M("sublayers",{layers:{type:[k]},visibleLayers:{type:[R]}})],r.prototype,"writeSublayers",null),o([p({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),o([p({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),o([p(L)],r.prototype,"url",void 0),r=o([P("esri.layers.MapImageLayer")],r);const gt=r;export{gt as default};
